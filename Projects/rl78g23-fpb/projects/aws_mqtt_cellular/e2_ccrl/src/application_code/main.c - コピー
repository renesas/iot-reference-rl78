/*
FreeRTOS
Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
Modifications Copyright (C) 2023 Renesas Electronics Corporation. or its affiliates.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 http://aws.amazon.com/freertos
 http://www.FreeRTOS.org
*/

/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "freertos_start.h"

/* Logging includes. */
#include "iot_logging_task.h"

#include "r_smc_entry.h"
#include "serial_term_uart.h"

#include "r_ryz_if.h"
#include "cert_profile_helper.h"

/* Demo includes */
#include "demo_config.h"

#if defined(CONFIG_SIMPLE_PUBSUB_DEMO)
    #define START_DEMO_FUNC    vStartSimplePubSubDemo
#else
    #define START_DEMO_FUNC    vStartSimpleMQTTDemo
#endif
extern void START_DEMO_FUNC( void );

/* APN settings */
#ifndef TOMO
#define USIM_APN                            "plus.acs.jp"
#define USIM_USER_ID                        "ym"
#define USIM_PSWD                           "ym"
#define USIM_AUTH                           (2)                  /* 1:PAP 2:CHAP */
#else
#define USIM_APN                            "mmtmobile.jp"
#define USIM_USER_ID                        "nipponsim@dhacorp"
#define USIM_PSWD                           "dhacorp"
#define USIM_AUTH                           (2)                  /* 1:PAP 2:CHAP */
#endif

/* Logging Task Defines. */
#define mainLOGGING_MESSAGE_QUEUE_LENGTH    ( 15 )
#define mainLOGGING_TASK_STACK_SIZE         ( 200 )

#define LED_PORT                            (P5_bit.no0)
/**
 * @brief Initializes the board.
 */
static void prvMiscInitialization( void );
static BaseType_t xPlatformNetworkUp( void );
static BaseType_t xIsNetworkUp = pdFALSE;

static BaseType_t xPlatformNetworkUp( void )
{
    BaseType_t ret = pdFALSE;
    uint32_t   ip_addr;

    if (WIFI_SUCCESS != R_RYZ_Open())
    {
        goto FUNC_END;
    }

    if (WIFI_SUCCESS != R_RYZ_ConnectAP(USIM_APN, USIM_USER_ID, USIM_PSWD, USIM_AUTH))
    {
        goto FUNC_END;
    }
    for (uint8_t i = 0; i < 5; i++)
    {
        if (WIFI_SUCCESS == R_RYZ_DnsQuery(clientcredentialMQTT_BROKER_ENDPOINT, &ip_addr))
        {
            ret = pdTRUE;
            break;
        }
    }
FUNC_END:
    if (pdTRUE == ret)
    {
        xIsNetworkUp = pdTRUE;
        configPRINTF(("Connecting Access Point is OK.\r\n "));
    }
    else
    {
        xIsNetworkUp = pdFALSE;
        configPRINTF(("Connecting Access Point is failed.\r\n "));
    }

    return ret;
}

BaseType_t xPlatformIsNetworkUp( void )
{
    return xIsNetworkUp;
}

/**
 * @brief The application entry point from a power on reset is PowerON_Reset_PC()
 * in resetprg.c.
 */
void main( void )
{
    Processing_Before_Start_Kernel();

    /* Start the scheduler.  Initialization that requires the OS to be running,
     * including the Wi-Fi initialization, is performed in the RTOS daemon task
     * startup hook. */
    vTaskStartScheduler();

    while(1)
    {
        ;
    }
}

void main_task( void * pvParameters )
{
//    prvSetCertificateProfile();

    if (pdTRUE == xPlatformNetworkUp())
    {
        START_DEMO_FUNC();
    }

    while( 1 )
    {
    	LED_PORT ^= 1;
        vTaskDelay(5000);
    }
}
/*-----------------------------------------------------------*/

static void prvMiscInitialization( void )
{
    /* Initialize UART for serial terminal. */
    uart_config();
    configPRINT_STRING(("Hello World.\r\n"));

    /* Start logging task. */
    xLoggingTaskInitialize( mainLOGGING_TASK_STACK_SIZE,
                            tskIDLE_PRIORITY,
                            mainLOGGING_MESSAGE_QUEUE_LENGTH );

}
/*-----------------------------------------------------------*/

void vApplicationDaemonTaskStartupHook( void )
{
	prvMiscInitialization();
}

/*-----------------------------------------------------------*/

/* configUSE_STATIC_ALLOCATION is set to 1, so the application must provide an
 * implementation of vApplicationGetIdleTaskMemory() to provide the memory that is
 * used by the Idle task. */
void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                    StackType_t ** ppxIdleTaskStackBuffer,
                                    uint32_t * pulIdleTaskStackSize )
{
    /* If the buffers to be provided to the Idle task are declared inside this
     * function then they must be declared static - otherwise they will be allocated on
     * the stack and so not exists after this function exits. */
    static StaticTask_t xIdleTaskTCB;
    static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle
     * task's state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
     * Note that, as the array is necessarily of type StackType_t,
     * configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
}
/*-----------------------------------------------------------*/

/**
 * @brief This is to provide the memory that is used by the RTOS daemon/time task.
 *
 * If configUSE_STATIC_ALLOCATION is set to 1, so the application must provide an
 * implementation of vApplicationGetTimerTaskMemory() to provide the memory that is
 * used by the RTOS daemon/time task.
 */
void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                     StackType_t ** ppxTimerTaskStackBuffer,
                                     uint32_t * pulTimerTaskStackSize )
{
    /* If the buffers to be provided to the Timer task are declared inside this
     * function then they must be declared static - otherwise they will be allocated on
     * the stack and so not exists after this function exits. */
    static StaticTask_t xTimerTaskTCB;
    static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle
     * task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
     * Note that, as the array is necessarily of type StackType_t,
     * configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
}
/*-----------------------------------------------------------*/

#ifndef iotconfigUSE_PORT_SPECIFIC_HOOKS

/**
 * @brief Warn user if pvPortMalloc fails.
 *
 * Called if a call to pvPortMalloc() fails because there is insufficient
 * free memory available in the FreeRTOS heap.  pvPortMalloc() is called
 * internally by FreeRTOS API functions that create tasks, queues, software
 * timers, and semaphores.  The size of the FreeRTOS heap is set by the
 * configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
 *
 */
void vApplicationMallocFailedHook( void )
{
    configPRINT_STRING( ( "ERROR: Malloc failed to allocate memory\r\n" ) );
    taskDISABLE_INTERRUPTS();

    /* Loop forever */
    for( ; ; )
    {
    }
}
/*-----------------------------------------------------------*/

/**
 * @brief Loop forever if stack overflow is detected.
 *
 * If configCHECK_FOR_STACK_OVERFLOW is set to 1,
 * this hook provides a location for applications to
 * define a response to a stack overflow.
 *
 * Use this hook to help identify that a stack overflow
 * has occurred.
 *
 */
void vApplicationStackOverflowHook( TaskHandle_t xTask, char * pcTaskName )
{
    configPRINT_STRING( ( "ERROR: stack overflow\r\n" ) );
    portDISABLE_INTERRUPTS();

    /* Unused Parameters */
    ( void ) xTask;
    ( void ) pcTaskName;

    /* Loop forever */
    for( ; ; )
    {
    }
}
/*-----------------------------------------------------------*/
#endif /* iotconfigUSE_PORT_SPECIFIC_HOOKS */
